generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch"]
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model sponsor {
    id          Int       @id @default(autoincrement())
    name        String    @db.VarChar(255)
    description String    @db.Text
    img         String    @db.VarChar(255)
    link        String    @db.VarChar(255)
    created_at  DateTime  @default(now()) @db.DateTime(6)
    updated_at  DateTime  @default(now()) @db.DateTime(6)
    deleted_at  DateTime? @db.DateTime(6)
}

model event {
    id          Int       @id @default(autoincrement())
    title       String    @db.VarChar(255)
    description String    @db.Text
    img         String    @db.VarChar(255)
    link        String    @db.VarChar(255)
    start_date  DateTime  @default(now()) @db.DateTime(6)
    end_date    DateTime  @default(now()) @db.DateTime(6)
    created_at  DateTime  @default(now()) @db.DateTime(6)
    updated_at  DateTime  @default(now()) @db.DateTime(6)
    deleted_at  DateTime? @db.DateTime(6)
}

model game {
    id         Int      @id @default(autoincrement())
    title      String   @db.VarChar(255)
    name       String   @db.VarChar(255)
    desc       String   @db.Text
    img        String   @db.VarChar(255)
    created_at DateTime @default(now()) @db.DateTime(6)
    updated_at DateTime @default(now()) @db.DateTime(6)
    player     player[]
}

model player {
    id         Int         @id @default(autoincrement())
    name       String      @db.VarChar(255)
    role       String      @db.VarChar(255)
    type       player_type @default(PLAYER)
    img        String      @db.VarChar(255)
    game_id    Int
    created_at DateTime    @default(now()) @db.DateTime(6)
    updated_at DateTime    @default(now()) @db.DateTime(6)
    game       game        @relation(fields: [game_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_4e3e3e3e3e3e3e3e3e3e3e3e3e")

    @@index([id], map: "FK_3e3e3e3e3e3e3e3e3e3e3e3e3e")
}

model address {
    id         Int      @id @default(autoincrement())
    address    String   @db.VarChar(255)
    zipcode    String   @db.VarChar(5)
    city       String   @db.VarChar(150)
    title      String   @db.VarChar(255)
    created_at DateTime @default(now()) @db.DateTime(6)
    updated_at DateTime @default(now()) @db.DateTime(6)
    user_id    Int?
    user       user?    @relation(fields: [user_id], references: [id])
}

model cart {
    id           Int            @id @default(autoincrement())
    user_id      Int
    created_at   DateTime       @default(now()) @db.DateTime(6)
    updated_at   DateTime       @default(now()) @db.DateTime(6)
    deleted_at   DateTime?      @db.DateTime(6)
    user         user           @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_3e3e3e3e3e3e3e3e3e3e3e3e3745")
    cart_content cart_content[]
}

model cart_content {
    id         Int            @id @default(autoincrement())
    quantity   Int            @default(1)
    product_id Int
    product    product        @relation(fields: [product_id], references: [id])
    size       cart_line_size
    created_at DateTime       @default(now()) @db.DateTime(6)
    updated_at DateTime       @default(now()) @db.DateTime(6)
    deleted_at DateTime?      @db.DateTime(6)
    flocking   String?        @db.VarChar(255)
    cart       cart           @relation(fields: [card_id], references: [id])
    card_id    Int
}

model message {
    id          Int      @id @default(autoincrement())
    pseudo      String   @db.VarChar(255)
    discord_tag String?  @db.VarChar(255)
    email       String   @db.VarChar(255)
    subject     String   @db.VarChar(255)
    text        String   @db.VarChar(255)
    created_at  DateTime @default(now()) @db.DateTime(6)
    updated_at  DateTime @default(now()) @db.DateTime(6)
}

model migrations {
    id        Int    @id @default(autoincrement())
    timestamp BigInt
    name      String @db.VarChar(255)
}

model order {
    id                  Int                  @id @default(autoincrement())
    discount            Int
    price_ht            Int
    price_ttc           Int
    paid_price_ht       Int
    paid_price_ttc      Int
    order_content       order_content[]
    payment_status      order_payment_status @default(NONE)
    status              order_status         @default(IN_PROGRESS)
    subscription        order_subscription?
    created_at          DateTime             @default(now()) @db.DateTime(6)
    updated_at          DateTime             @default(now()) @db.DateTime(6)
    user_id             Int?
    billing_address_id  Int
    shipping_address_id Int
    user                user?                @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_199e32a02ddc0f47cd93181d8fd")

    @@index([user_id], map: "FK_199e32a02ddc0f47cd93181d8fd")
}

model order_content {
    id         Int       @id @default(autoincrement())
    quantity   Int       @default(1)
    product_id Int
    product    product   @relation(fields: [product_id], references: [id])
    created_at DateTime  @default(now()) @db.DateTime(6)
    updated_at DateTime  @default(now()) @db.DateTime(6)
    deleted_at DateTime? @db.DateTime(6)
    order      order?    @relation(fields: [order_id], references: [id])
    order_id   Int?
}

model credit_card {
    id         Int      @id @default(autoincrement())
    number     String   @db.VarChar(255)
    expiration String   @db.VarChar(255)
    name       String   @db.VarChar(255)
    cvc        String   @db.VarChar(255)
    created_at DateTime @default(now()) @db.DateTime(6)
    updated_at DateTime @default(now()) @db.DateTime(6)
    user_id    Int
    user       user     @relation(fields: [user_id], references: [id])
}

model product {
    id            Int             @id @default(autoincrement())
    flockingable  Boolean         @default(false)
    description   String          @db.Text
    name          String          @db.VarChar(255)
    basePrice     Decimal         @default(0)
    sizable       Boolean         @default(false)
    img           String          @db.VarChar(255)
    img2          String?         @db.VarChar(255)
    created_at    DateTime        @default(now()) @db.DateTime(6)
    updated_at    DateTime        @default(now()) @db.DateTime(6)
    deleted_at    DateTime?       @db.DateTime(6)
    stock         stock[]
    order_content order_content[]
    cart_content  cart_content[]
}

model role {
    id         Int       @id @default(autoincrement())
    name       String    @unique(map: "IDX_ae4578dcaed5adff96595e6166") @db.VarChar(255)
    created_at DateTime  @default(now()) @db.DateTime(6)
    updated_at DateTime  @default(now()) @db.DateTime(6)
    deleted_at DateTime? @db.DateTime(6)
    user       user[]
}

model stock {
    id         Int         @id @default(autoincrement())
    amount     Int
    size       stock_size?
    created_at DateTime    @default(now()) @db.DateTime(6)
    updated_at DateTime    @default(now()) @db.DateTime(6)
    deleted_at DateTime?   @db.DateTime(6)
    product_id Int?
    product    product?    @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_375ba760c8cff338fc8c94b416c")

    @@index([product_id], map: "FK_375ba760c8cff338fc8c94b416c")
}

model user {
    id                 Int           @id @default(autoincrement())
    discord_tag        String?       @unique(map: "IDX_ff2b782400a5c8bb402d5b12de") @db.VarChar(255)
    email              String        @unique(map: "IDX_e12875dfb3b1d92d7d7c5377e2") @db.VarChar(255)
    first_name         String        @db.VarChar(255)
    last_name          String        @db.VarChar(255)
    password           String        @db.VarChar(255)
    pseudo             String        @db.VarChar(255)
    last_connection    DateTime      @default(now()) @db.DateTime(0)
    created_at         DateTime      @default(now()) @db.DateTime(6)
    updated_at         DateTime      @default(now()) @db.DateTime(6)
    deleted_at         DateTime?     @db.DateTime(6)
    active             Boolean       @default(false)
    token_verification String?       @unique @db.VarChar(255)
    fidelity_points    Int           @default(0)
    role_id            Int           @default(1)
    membership_id      Int?
    order              order[]
    address            address[]
    role               role?         @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_33a6fc2fcb019d8e3a8ace0f55f")
    membership         membership?   @relation(fields: [membership_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_75e3e3e3e3e3e3e3e3e3e3e3e3e")
    cart               cart[]
    credit_card        credit_card[]
}

model membership {
    id          Int             @id @default(autoincrement())
    name        String          @db.VarChar(255)
    description String?         @db.Text
    img         String?         @db.VarChar(255)
    price       Decimal         @default(0)
    occurence   price_occurence @default(MONTHLY)
    created_at  DateTime        @default(now()) @db.DateTime(6)
    updated_at  DateTime        @default(now()) @db.DateTime(6)
    user        user[]
}

model matches {
    id             Int          @id @default(autoincrement())
    title          String       @db.VarChar(255)
    instance       String       @db.VarChar(255)
    opponent       String       @db.VarChar(255)
    opponent_logo  String       @db.VarChar(255)
    score_exa      Int          @default(0)
    score_opponent Int          @default(0)
    format         String       @db.VarChar(255)
    date           DateTime     @default(now()) @db.DateTime(6)
    timezone       String       @db.VarChar(255)
    link           String       @db.VarChar(255)
    status         match_status @default(NOT_STARTED)
    created_at     DateTime     @default(now()) @db.DateTime(6)
    updated_at     DateTime     @default(now()) @db.DateTime(6)
}

model recruitment {
    id                          Int                       @id @default(autoincrement())
    title                       String                    @db.VarChar(255)
    description                 String                    @db.Text
    created_at                  DateTime                  @default(now()) @db.DateTime(6)
    updated_at                  DateTime                  @default(now()) @db.DateTime(6)
    category                    recruitement_category     @relation(fields: [category_id], references: [id])
    sub_category                recruitement_sub_category @relation(fields: [recruitement_sub_categoryId], references: [id])
    recruitement_sub_categoryId Int
    category_id                 Int
}

model recruitement_category {
    id                        Int                         @id @default(autoincrement())
    name                      String                      @db.VarChar(255)
    recruitement_sub_category recruitement_sub_category[]
    recruitment               recruitment[]
}

model recruitement_sub_category {
    id                      Int                   @id @default(autoincrement())
    name                    String                @db.VarChar(255)
    category                recruitement_category @relation(fields: [recruitement_categoryId], references: [id])
    recruitment             recruitment[]
    recruitement_categoryId Int
}

enum price_occurence {
    MONTHLY
    YEARLY
}

enum match_status {
    NOT_STARTED
    FINISHED
    IN_PROGRESS
}

enum adjustment_type {
    POOL
}

enum payment_status {
    NEW
    WAITING
    PROCESSING
    BLOCKED_FUNDS
    PAID
    CANCELED
    FAILED
    REFUNDED
    REFUND_PENDING
    PARTIALLY_REFUNDED
    REFUND_FAILED
}

enum stock_size {
    S
    M
    L
    XL
    XXL
    XXXL  @map("3XL")
    XXXXL @map("4XL")
}

enum cart_line_size {
    S
    M
    L
    XL
    XXL
    XXXL  @map("3XL")
    XXXXL @map("4XL")
}

enum order_line_size {
    S
    M
    L
    XL
    XXL
    XXXL  @map("3XL")
    XXXXL @map("4XL")
}

enum order_payment_status {
    NONE
    AWAITING
    PARTIALLY
    PAID
    TO_BE_REFUNDED
    POOLED
    PAYMENT_FAILED
    REFUNDED
}

enum order_status {
    IN_PROGRESS
    CANCELLED
    VALIDATED
    SHIPPED
}

enum order_subscription {
    CONTRIBUTOR
    ADHERENT
    PREMIUM_ADHERENT
}

enum player_type {
    PLAYER
    COACH
    MANAGER
    STAFF
    SUB
    COACH_SUB
    MANAGER_SUB
    STAFF_SUB
}
